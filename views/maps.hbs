
<div id="map_wrapper">
    <div id="map_canvas" class="z-depth-1 col-centered" style="height: 600px; width: 600px;"></div>
    <input id="id" type="String" name="id" >
    <input id="mylat" type="String" name="mylat" hidden>
    <input id="mylng" type="String" name="mylng" hidden>
    <input id="mlat" type="String" name="mlat" hidden>
    <input id="mlng" type="String" name="mlng" hidden>
    
    <button onclick="sendData()" >confirm</button>
</div>

<script defer
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC9q7X02IpHJI_GYGjfIvvp8y9Ffp--EX0&callback=initialize">
</script>
 <script src="/socket.io/socket.io.js"></script>

<script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js">
</script>
<script>


var socket = io(); 
var dataObj = {};

function sendData() {
    dataObj = {
        "id":document.getElementById("id").value,
        "mylat":document.getElementById("mylat").value,
        "mylng":document.getElementById("mylng").value,
        "mlat":document.getElementById("mlat").value,
        "mlng":document.getElementById("mlng").value
    };
    socket.emit("locationData", dataObj);
}

socket.on('initData',function(data){
    console.log("data",data);
    console.log("datalength", data.length);
    var markers = [];
    for(var j=0;j<data.length;j+=4)    
    {
        markers.push(
            [
                "dustbin "+j, 
                data[j], 
                data[j+1],
                data[j+2],
                data[j+3]
            ]
        );
    }
    console.log("markers",markers);
    initialize(markers);
});

socket.on('updateMaps',function (data){
    var markers = [];
    for(var j=0;j<data.length;j+=4)    
    {
        markers.push(
            [
                "dustbin "+j, 
                data[j], 
                data[j+1],
                data[j+2],
                data[j+3]
            ]
        );
    }
    initialize(markers);

    console.log("updated");
}); 
socket.on('newDustBin',function(data){
    var markers = [];
    for(var j=0;j<data.length;j+=4)    
    {
        markers.push(
            [
                "dustbin "+j, 
                data[j], 
                data[j+1],
                data[j+2],
                data[j+3]
            ]
        );
    }
    initialize(markers);

    console.log("updated");

});
socket.on('mapsPage',function(data){
    window.location.href = data;
})   
    





function initialize(markers) {
    var markers = markers || [];
    var map;
    var bounds = new google.maps.LatLngBounds();
    var mapOptions = {
        zoom:10,
        mapTypeId: 'roadmap'
    };
    var directionsService = new google.maps.DirectionsService;
    map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);
    var directionsDisplay = new google.maps.DirectionsRenderer({map:map});
    map.setTilt(45);
    navigator.geolocation.getCurrentPosition(function (position) {
        initialLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
        map.setCenter(initialLocation);
    });
    var socket = io();
        // var id = document.getElementById("id").value;
        // socket.emit('idValue' ,id);
        // console.log("data sent"); 
        // socket.on('refreshData',function(data){
        //     console.log("data",data);
        //     console.log("datalength", data.length);
        //     /*read(data);*/
        //     var markers = [];
            // for(var j=0;j<data.length;j+=4)    
            // {
            //     markers.push(
            //         [
            //             "dustbin "+j, 
            //             data[j], 
            //             data[j+1],
            //             data[j+2],
            //             data[j+3]
            //         ]
            //     );
            // }
            console.log("markers",markers);
            if(navigator.geolocation){
                navigator.geolocation.getCurrentPosition(function(position){
                    var pos = {
                        lat:position.coords.latitude,
                        lng:position.coords.longitude
                    };
                    displayMarkers(markers,map,bounds,pos,directionsService,directionsDisplay);    
                },
                function(){
                    handleLocationError(true,map.getCentre());
                });
            }
            else{
                handleLocationError(false,map.getCentre());
            }
    // });
            // initialize(markers);
        
}
    // var dataString = "{{locations}}";
    // console.log("string",dataString);
    // var dataArray = [];
    // dataArray = dataString.split(',');
    // var markers = [];
    // for(var j=0;j<dataArray.length;j+=4)    
    // {
    //     markers.push(
    //         [
    //             "dustbin "+j, 
    //             dataArray[j], 
    //             dataArray[j+1],
    //             dataArray[j+2],
    //             dataArray[j+3]
    //         ]
    //     );
    // }

//     if(navigator.geolocation){
//         navigator.geolocation.getCurrentPosition(function(position){
//             var pos = {
//                 lat:position.coords.latitude,
//                 lng:position.coords.longitude
//             };
//             displayMarkers(markers,map,bounds,pos,directionsService,directionsDisplay);    
//         },
//         function(){
//             handleLocationError(true,map.getCentre());
//         });
//     }
//     else{
//         handleLocationError(false,map.getCentre());
//     }
// }

//display markers
function displayMarkers(markers,myMap,bounds,myPos,directionsService,directionsDisplay){
    var image= new google.maps.MarkerImage("/images/dustbin.png", null, null, null, new google.maps.Size(20,22));      
    var image2 = new google.maps.MarkerImage("/images/self.png",null,null,null, new google.maps.Size(30,30));
    var markArr=[];
            console.log(markers);

     for( i = 0; i < markers.length; i++ ) {
        if(markers[i][4]=="full"){   
        
            var position = new google.maps.LatLng(markers[i][2], markers[i][3]);
            bounds.extend(position);
            marker = new google.maps.Marker({
                position: position,
                map: myMap,
                icon : image,
                title: markers[i][0],
            });
            marker.set("id", markers[i][1]);
            var myId = marker.get("id");
            console.log(myId);
        }
        else
            continue;

        marker.addListener('click',function(evt){
            var markerLatLng = {lat:evt.latLng.lat(),lng:evt.latLng.lng()};
            document.getElementById("id").value=this.id;
            document.getElementById("mylat").value=myPos.lat;
            document.getElementById("mylng").value=myPos.lng;
            document.getElementById("mlat").value=markerLatLng.lat;
            document.getElementById("mlng").value=markerLatLng.lng;
            calculateDirectionsDisplay(myMap,myPos,markerLatLng,directionsService,directionsDisplay);
            
        });
        markArr.push(marker);
         // Display multiple markers on a map
         var infoWindow = new google.maps.InfoWindow(), marker, i;
         // Loop through our array of markers & place each one on the map   
         myMap.fitBounds(bounds);
         // Automatically center the map fitting all markers on the screen
          // Override our map zoom level once our fitBounds function runs (Make sure it only runs once)

        
    }
    var markerCluster = new MarkerClusterer(myMap, markArr,
            {imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m'});
      
    marker=new google.maps.Marker({
        map:myMap,
        position:myPos,
        icon: image2
    });
    myMap.setCenter(new google.maps.LatLng(myPos));
    console.log(marker);
    var boundsListener = google.maps.event.addListener((myMap), 'bounds_changed', function(event) {
        myMap.setZoom(8);
        google.maps.event.removeListener(boundsListener);
        });
    
   
}

//calculate directions and display
function calculateDirectionsDisplay(myMap,myPos,markerLatLng,directionsService,directionsDisplay){
    console.log(myPos,markerLatLng);
    
    directionsService.route({
        origin: myPos,
        destination: markerLatLng,
        travelMode: 'DRIVING'
    }, function(response,status){
        if (status === 'OK') {
        console.log("directionapires",response);
        directionsDisplay.setDirections(response);
    } 
        else {
        window.alert('Directions request failed due to ' + status);
    }
    });
    myMap.setCenter(markerLatLng);
    myMap.setZoom(55);
    console.log(directionsService);
   
    

}

</script>